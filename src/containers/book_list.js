import React, {Component} from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index'; //take action return value
import { bindActionCreators } from 'redux'; // make sure every the action is generated by action creator actually ends up flowing through all the different reducers

class BookList extends Component {
  renderList(){
    //combine our react views and connecting two seperate redux and react libraries
    return this.props.books.map((book)=>{
      return (
        // don't forget add key because it is list need unique value for key
        <li 
          key={book.title} 
          onClick={() => this.props.selectBook(book)} 
          className="list-group-item"
        >
          {book.title}
        </li>
      )
    })
  }
  render(){
    return(
      //renderList is helper function
      <ul className="list-group col-sm-4">
        { this.renderList() }
      </ul>
    )
  }
};

//below function is gule
function mapStateToProps(state){
  // Whatever is returned will show up as props inside of BookList
  return {
    books: state.books
  }
}
//Anything returned from this function will end up as props on BookList container
function mapDispatchToProps(dispatch){
  //Wherever selectBook is called, the result should be passed to all of our reducer
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

//promote BookList from a component to a container - it needs to know about this new dispatch method, selectBook. Make it available as props.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
//connect takes a function and a component and produces a container 